import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError, InternalAxiosRequestConfig } from 'axios'
import { env } from './env'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const axiosInstance: AxiosInstance = axios.create({
  baseURL: env.API_BASE_URL,
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  headers: {
    'Content-Type': 'application/json',
  },
})

// Interceptor –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
axiosInstance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ development —Ä–µ–∂–∏–º–µ
    if (env.NODE_ENV === 'development') {
      // eslint-disable-next-line no-console
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`)
    }

    return config
  },
  (error: AxiosError) => {
    // eslint-disable-next-line no-console
    console.error('‚ùå Request Error:', error)
    return Promise.reject(error)
  },
)

// Interceptor –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
axiosInstance.interceptors.response.use(
  (response: AxiosResponse) => {
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ development —Ä–µ–∂–∏–º–µ
    if (env.NODE_ENV === 'development') {
      // eslint-disable-next-line no-console
      console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`)
    }

    return response
  },
  (error: AxiosError) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
      const { status, data } = error.response

      switch (status) {
      case 401:
        // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        if (typeof window !== 'undefined') {
          localStorage.removeItem('token')
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
          // window.location.href = '/login'
        }
        // eslint-disable-next-line no-console
        console.error('üîí Unauthorized access')
        break
      case 403:
        // eslint-disable-next-line no-console
        console.error('üö´ Forbidden access')
        break
      case 404:
        // eslint-disable-next-line no-console
        console.error('üîç Resource not found')
        break
      case 500:
        // eslint-disable-next-line no-console
        console.error('üí• Internal server error')
        break
      default:
        // eslint-disable-next-line no-console
        console.error(`‚ùå API Error: ${status}`, data)
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
      // eslint-disable-next-line no-console
      console.error('üåê Network Error:', error.message)
    } else {
      // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      // eslint-disable-next-line no-console
      console.error('‚öôÔ∏è Request Setup Error:', error.message)
    }

    return Promise.reject(error)
  },
)

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
export default axiosInstance

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export type { AxiosRequestConfig, AxiosResponse, AxiosError }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
export const api = {
  get: <T = unknown>(url: string, config?: AxiosRequestConfig) =>
    axiosInstance.get<T>(url, config),

  post: <T = unknown>(url: string, data?: unknown, config?: AxiosRequestConfig) =>
    axiosInstance.post<T>(url, data, config),

  put: <T = unknown>(url: string, data?: unknown, config?: AxiosRequestConfig) =>
    axiosInstance.put<T>(url, data, config),

  patch: <T = unknown>(url: string, data?: unknown, config?: AxiosRequestConfig) =>
    axiosInstance.patch<T>(url, data, config),

  delete: <T = unknown>(url: string, config?: AxiosRequestConfig) =>
    axiosInstance.delete<T>(url, config),
}